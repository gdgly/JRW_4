; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini51Series\Include -I..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include --omf_browse=.\obj\main.crf main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  setupSystemClock PROC
;;;16     
;;;17     void setupSystemClock(void)
000000  b510              PUSH     {r4,lr}
;;;18     {
;;;19     		SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;20     	
;;;21     		/* Enable HIRC clock */
;;;22     		CLK_EnableXtalRC(CLK_PWRCON_HIRC_EN_Msk);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       CLK_EnableXtalRC
;;;23     
;;;24     		/* Waiting for HIRC clock ready */
;;;25     		CLK_WaitClockReady(CLK_CLKSTATUS_HIRC_STB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;26     
;;;27     		/* Switch HCLK clock source to HIRC */
;;;28     		CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC, CLK_CLKDIV_HCLK(1));
000012  2100              MOVS     r1,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       CLK_SetHCLK
;;;29     	
;;;30     		/* SysTick source to HCLK/2 */
;;;31         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLK_S_HCLK_DIV2);
00001a  2018              MOVS     r0,#0x18
00001c  f7fffffe          BL       CLK_SetSysTickClockSrc
;;;32     		
;;;33     		/* To update the variable SystemCoreClock */
;;;34         SystemCoreClockUpdate();
000020  f7fffffe          BL       SystemCoreClockUpdate
;;;35     	
;;;36     		SYS_LockReg();
000024  f7fffffe          BL       SYS_LockReg
;;;37     }
000028  bd10              POP      {r4,pc}
;;;38     void SysTick_Handler(void)
                          ENDP

                  SysTick_Handler PROC
00002a  482c              LDR      r0,|L1.220|
;;;39     {
;;;40     	tick_counter++;
00002c  6801              LDR      r1,[r0,#0]  ; tick_counter
00002e  1c49              ADDS     r1,r1,#1
000030  6001              STR      r1,[r0,#0]  ; tick_counter
;;;41     }
000032  4770              BX       lr
;;;42     
                          ENDP

                  setupUART PROC
;;;43     void setupUART()
000034  b510              PUSH     {r4,lr}
;;;44     {
;;;45     	/* Enable peripheral clock */
;;;46     	CLK_EnableModuleClock(UART_MODULE);
000036  4c2a              LDR      r4,|L1.224|
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       CLK_EnableModuleClock
;;;47     	/* Peripheral clock source */
;;;48     	CLK_SetModuleClock(UART_MODULE, CLK_CLKSEL1_UART_S_HIRC, CLK_CLKDIV_UART(1));
00003e  2101              MOVS     r1,#1
000040  2200              MOVS     r2,#0
000042  0649              LSLS     r1,r1,#25
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       CLK_SetModuleClock
;;;49     	/* Set PD multi-function pins for UART0 RXD, TXD */
;;;50     	SYS->P0_MFP = SYS_MFP_P00_TXD | SYS_MFP_P01_RXD;
00004a  2105              MOVS     r1,#5
00004c  4825              LDR      r0,|L1.228|
00004e  0709              LSLS     r1,r1,#28
000050  6308              STR      r0,[r1,#0x30]
;;;51     	/* Reset UART module */
;;;52     	SYS_ResetModule(UART_RST);
000052  4825              LDR      r0,|L1.232|
000054  f7fffffe          BL       SYS_ResetModule
;;;53     
;;;54     	/* Configure UART0 and set UART0 Baudrate */
;;;55     	UART_Open(UART0, 115200);
000058  21e1              MOVS     r1,#0xe1
00005a  0249              LSLS     r1,r1,#9
00005c  4823              LDR      r0,|L1.236|
00005e  f7fffffe          BL       UART_Open
;;;56     }
000062  bd10              POP      {r4,pc}
;;;57     
                          ENDP

                  setup_system_tick PROC
;;;58     void setup_system_tick(uint32_t sampleRate)
000064  b570              PUSH     {r4-r6,lr}
;;;59     {
;;;60     	uint32_t tickPeriod = SystemCoreClock/sampleRate;
000066  4c22              LDR      r4,|L1.240|
000068  4605              MOV      r5,r0                 ;59
00006a  4601              MOV      r1,r0
00006c  6820              LDR      r0,[r4,#0]  ; SystemCoreClock
00006e  f7fffffe          BL       __aeabi_uidivmod
;;;61     	
;;;62     	SysTick_Config(tickPeriod);
000072  f7fffffe          BL       SysTick_Config
;;;63     	//ChronographStart(ChronMain);
;;;64     	printf("SystemCoreClock:%d\n",SystemCoreClock);
000076  a01f              ADR      r0,|L1.244|
000078  6821              LDR      r1,[r4,#0]  ; SystemCoreClock
00007a  f7fffffe          BL       __2printf
;;;65     	printf("Tick Time: %d us\n",1000000/sampleRate);
00007e  4629              MOV      r1,r5
000080  4821              LDR      r0,|L1.264|
000082  f7fffffe          BL       __aeabi_uidivmod
000086  4601              MOV      r1,r0
000088  a020              ADR      r0,|L1.268|
00008a  f7fffffe          BL       __2printf
;;;66     }
00008e  bd70              POP      {r4-r6,pc}
;;;67     
                          ENDP

                  setup PROC
;;;68     void setup()
000090  b510              PUSH     {r4,lr}
;;;69     {
;;;70     	//初始化系统时钟
;;;71     	setupSystemClock();
000092  f7fffffe          BL       setupSystemClock
;;;72     		
;;;73     	//初始化串口
;;;74     	setupUART();
000096  f7fffffe          BL       setupUART
;;;75     
;;;76     	//初始化系统定时器
;;;77     	setup_system_tick(SYSTEM_TICK_FREQ);
00009a  207d              MOVS     r0,#0x7d
00009c  00c0              LSLS     r0,r0,#3
00009e  f7fffffe          BL       setup_system_tick
;;;78     	
;;;79     	//初始化IIC
;;;80     	//初始化FLASH
;;;81     	//初始化BATTERY_DETECT
;;;82     	//初始化遥控
;;;83     	//初始化LED
;;;84     	//初始化TIMER
;;;85     	//初始化自稳定
;;;86     	//初始化AHRS算法
;;;87     	//初始化SENSOR
;;;88     	
;;;89     //	printf("\n\nCPU @ %dHz\n", SystemCoreClock);
;;;90     }
0000a2  bd10              POP      {r4,pc}
;;;91     
                          ENDP

                  main PROC
;;;97     
;;;98     int main()
0000a4  f7fffffe          BL       setup
                  |L1.168|
;;;99     {
;;;100      setup();
;;;101    	while(1) loop();
0000a8  e7fe              B        |L1.168|
;;;102    }
;;;103    
                          ENDP

                  SysTick_Config PROC
;;;644     */
;;;645    __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
0000aa  491d              LDR      r1,|L1.288|
;;;646    {
0000ac  b510              PUSH     {r4,lr}
;;;647      if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
0000ae  4288              CMP      r0,r1
0000b0  d901              BLS      |L1.182|
0000b2  2001              MOVS     r0,#1
;;;648    
;;;649      SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
;;;650      NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
;;;651      SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
;;;652      SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
;;;653                       SysTick_CTRL_TICKINT_Msk   |
;;;654                       SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
;;;655      return (0);                                                  /* Function successful */
;;;656    }
0000b4  bd10              POP      {r4,pc}
                  |L1.182|
0000b6  0201              LSLS     r1,r0,#8              ;649
0000b8  0a09              LSRS     r1,r1,#8              ;649
0000ba  481a              LDR      r0,|L1.292|
0000bc  1e49              SUBS     r1,r1,#1              ;649
0000be  6141              STR      r1,[r0,#0x14]         ;649
0000c0  4919              LDR      r1,|L1.296|
0000c2  2207              MOVS     r2,#7                 ;649
0000c4  69cb              LDR      r3,[r1,#0x1c]         ;649
0000c6  021b              LSLS     r3,r3,#8              ;649
0000c8  0a1b              LSRS     r3,r3,#8              ;649
0000ca  0444              LSLS     r4,r0,#17             ;649
0000cc  4323              ORRS     r3,r3,r4              ;649
0000ce  61cb              STR      r3,[r1,#0x1c]         ;649
0000d0  2100              MOVS     r1,#0                 ;651
0000d2  6181              STR      r1,[r0,#0x18]         ;651
0000d4  6102              STR      r2,[r0,#0x10]         ;652
0000d6  4608              MOV      r0,r1                 ;655
0000d8  bd10              POP      {r4,pc}
;;;657    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      ||.data||
                  |L1.224|
                          DCD      0x27803d10
                  |L1.228|
                          DCD      0x00000303
                  |L1.232|
                          DCD      0x04000010
                  |L1.236|
                          DCD      0x40050000
                  |L1.240|
                          DCD      SystemCoreClock
                  |L1.244|
0000f4  53797374          DCB      "SystemCoreClock:%d\n",0
0000f8  656d436f
0000fc  7265436c
000100  6f636b3a
000104  25640a00
                  |L1.264|
                          DCD      0x000f4240
                  |L1.268|
00010c  5469636b          DCB      "Tick Time: %d us\n",0
000110  2054696d
000114  653a2025
000118  64207573
00011c  0a00    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L1.288|
                          DCD      0x00ffffff
                  |L1.292|
                          DCD      0xe000e000
                  |L1.296|
                          DCD      0xe000ed04

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  loop PROC
;;;16     
;;;17     void setupSystemClock(void)
000000  4770              BX       lr
;;;18     {
;;;19     		SYS_UnlockReg();
;;;20     	
;;;21     		/* Enable HIRC clock */
;;;22     		CLK_EnableXtalRC(CLK_PWRCON_HIRC_EN_Msk);
;;;23     
;;;24     		/* Waiting for HIRC clock ready */
;;;25     		CLK_WaitClockReady(CLK_CLKSTATUS_HIRC_STB_Msk);
;;;26     
;;;27     		/* Switch HCLK clock source to HIRC */
;;;28     		CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC, CLK_CLKDIV_HCLK(1));
;;;29     	
;;;30     		/* SysTick source to HCLK/2 */
;;;31         CLK_SetSysTickClockSrc(CLK_CLKSEL0_STCLK_S_HCLK_DIV2);
;;;32     		
;;;33     		/* To update the variable SystemCoreClock */
;;;34         SystemCoreClockUpdate();
;;;35     	
;;;36     		SYS_LockReg();
;;;37     }
;;;38     void SysTick_Handler(void)
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  tick_counter
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_43aede3f____REV16|
#line 118 "..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_43aede3f____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_43aede3f____REVSH|
#line 132
|__asm___6_main_c_43aede3f____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
