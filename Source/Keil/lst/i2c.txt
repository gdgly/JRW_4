; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini51Series\Include -I..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include --omf_browse=.\obj\i2c.crf ..\Library\StdDriver\src\i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_Open PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4d0c              LDR      r5,|L1.52|
000004  4604              MOV      r4,r0                 ;33
000006  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
000008  220a              MOVS     r2,#0xa
00000a  0089              LSLS     r1,r1,#2
00000c  4350              MULS     r0,r2,r0
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  1d40              ADDS     r0,r0,#5
000014  210a              MOVS     r1,#0xa
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  1e40              SUBS     r0,r0,#1
;;;37         i2c->I2CLK = u32Div;
00001c  6120              STR      r0,[r4,#0x10]
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
00001e  6821              LDR      r1,[r4,#0]
000020  2240              MOVS     r2,#0x40
000022  4311              ORRS     r1,r1,r2
000024  6021              STR      r1,[r4,#0]
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  0081              LSLS     r1,r0,#2
000028  1d09              ADDS     r1,r1,#4
00002a  6828              LDR      r0,[r5,#0]  ; SystemCoreClock
00002c  f7fffffe          BL       __aeabi_uidivmod
;;;43     }
000030  bd70              POP      {r4-r6,pc}
;;;44     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      SystemCoreClock

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  I2C_Close PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  2105              MOVS     r1,#5
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  0709              LSLS     r1,r1,#28
000004  68cb              LDR      r3,[r1,#0xc]          ;33
000006  22ff              MOVS     r2,#0xff
000008  3201              ADDS     r2,#1
00000a  4313              ORRS     r3,r3,r2
00000c  60cb              STR      r3,[r1,#0xc]
00000e  68cb              LDR      r3,[r1,#0xc]
000010  4393              BICS     r3,r3,r2
000012  60cb              STR      r3,[r1,#0xc]
000014  6801              LDR      r1,[r0,#0]
000016  2240              MOVS     r2,#0x40
000018  4391              BICS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;37         i2c->I2CLK = u32Div;
00001c  4770              BX       lr
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  I2C_ClearTimeoutFlag PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6941              LDR      r1,[r0,#0x14]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2              ;33
000006  6141              STR      r1,[r0,#0x14]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  I2C_Trigger PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b530              PUSH     {r4,r5,lr}
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2400              MOVS     r4,#0
000004  9d03              LDR      r5,[sp,#0xc]          ;33
000006  2900              CMP      r1,#0
000008  d000              BEQ      |L4.12|
00000a  2420              MOVS     r4,#0x20
                  |L4.12|
00000c  2a00              CMP      r2,#0
00000e  d001              BEQ      |L4.20|
000010  2110              MOVS     r1,#0x10
000012  430c              ORRS     r4,r4,r1
                  |L4.20|
000014  2b00              CMP      r3,#0
000016  d001              BEQ      |L4.28|
000018  2108              MOVS     r1,#8
00001a  430c              ORRS     r4,r4,r1
                  |L4.28|
;;;37         i2c->I2CLK = u32Div;
00001c  2d00              CMP      r5,#0
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
00001e  d001              BEQ      |L4.36|
000020  2104              MOVS     r1,#4
000022  430c              ORRS     r4,r4,r1
                  |L4.36|
000024  6801              LDR      r1,[r0,#0]
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  223c              MOVS     r2,#0x3c
000028  4391              BICS     r1,r1,r2
00002a  4321              ORRS     r1,r1,r4
00002c  6001              STR      r1,[r0,#0]
00002e  bd30              POP      {r4,r5,pc}
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  I2C_DisableInt PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6801              LDR      r1,[r0,#0]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2280              MOVS     r2,#0x80
000004  4391              BICS     r1,r1,r2              ;33
000006  6001              STR      r1,[r0,#0]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  I2C_EnableInt PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6801              LDR      r1,[r0,#0]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2280              MOVS     r2,#0x80
000004  4311              ORRS     r1,r1,r2              ;33
000006  6001              STR      r1,[r0,#0]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  I2C_GetBusClockFreq PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b510              PUSH     {r4,lr}
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  6900              LDR      r0,[r0,#0x10]
000004  0081              LSLS     r1,r0,#2              ;33
000006  4803              LDR      r0,|L7.20|
000008  1d09              ADDS     r1,r1,#4
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  bd10              POP      {r4,pc}
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      SystemCoreClock

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  I2C_SetBusClockFreq PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4604              MOV      r4,r0
000004  4809              LDR      r0,|L8.44|
000006  220a              MOVS     r2,#0xa
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000a  0089              LSLS     r1,r1,#2
00000c  4605              MOV      r5,r0
00000e  4350              MULS     r0,r2,r0
000010  f7fffffe          BL       __aeabi_uidivmod
000014  1d40              ADDS     r0,r0,#5
000016  210a              MOVS     r1,#0xa
000018  f7fffffe          BL       __aeabi_uidivmod
;;;37         i2c->I2CLK = u32Div;
00001c  1e40              SUBS     r0,r0,#1
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
00001e  6120              STR      r0,[r4,#0x10]
000020  0081              LSLS     r1,r0,#2
000022  1d09              ADDS     r1,r1,#4
000024  4628              MOV      r0,r5
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  bd70              POP      {r4-r6,pc}
;;;43     }
;;;44     
                          ENDP

                  |L8.44|
                          DCD      SystemCoreClock

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.text||
                  I2C_GetIntFlag PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6800              LDR      r0,[r0,#0]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  0700              LSLS     r0,r0,#28
000004  0fc0              LSRS     r0,r0,#31             ;33
000006  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.10||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.10||, ||.text||
                  I2C_GetStatus PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  68c0              LDR      r0,[r0,#0xc]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.11||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.text||
                  I2C_GetData PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6880              LDR      r0,[r0,#8]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.12||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.text||
                  I2C_SetData PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6081              STR      r1,[r0,#8]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.13||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.13||, ||.text||
                  I2C_SetSlaveAddr PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  0052              LSLS     r2,r2,#1
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  431a              ORRS     r2,r2,r3
000004  2900              CMP      r1,#0                 ;33
000006  d005              BEQ      |L13.20|
000008  2901              CMP      r1,#1
00000a  d005              BEQ      |L13.24|
00000c  2902              CMP      r1,#2
00000e  d005              BEQ      |L13.28|
000010  2903              CMP      r1,#3
000012  d005              BEQ      |L13.32|
                  |L13.20|
000014  6042              STR      r2,[r0,#4]
000016  4770              BX       lr
                  |L13.24|
000018  6182              STR      r2,[r0,#0x18]
00001a  4770              BX       lr
                  |L13.28|
;;;37         i2c->I2CLK = u32Div;
00001c  61c2              STR      r2,[r0,#0x1c]
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
00001e  4770              BX       lr
                  |L13.32|
000020  6202              STR      r2,[r0,#0x20]
000022  4770              BX       lr
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  I2C_SetSlaveAddrMask PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  0052              LSLS     r2,r2,#1
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2900              CMP      r1,#0
000004  d005              BEQ      |L14.18|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L14.22|
00000a  2902              CMP      r1,#2
00000c  d005              BEQ      |L14.26|
00000e  2903              CMP      r1,#3
000010  d005              BEQ      |L14.30|
                  |L14.18|
000012  6242              STR      r2,[r0,#0x24]
000014  4770              BX       lr
                  |L14.22|
000016  6282              STR      r2,[r0,#0x28]
000018  4770              BX       lr
                  |L14.26|
00001a  62c2              STR      r2,[r0,#0x2c]
;;;37         i2c->I2CLK = u32Div;
00001c  4770              BX       lr
                  |L14.30|
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
00001e  6302              STR      r2,[r0,#0x30]
000020  4770              BX       lr
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.15||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.text||
                  I2C_EnableTimeout PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  2202              MOVS     r2,#2
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2900              CMP      r1,#0
000004  6941              LDR      r1,[r0,#0x14]         ;33
000006  d001              BEQ      |L15.12|
000008  4311              ORRS     r1,r1,r2
00000a  e000              B        |L15.14|
                  |L15.12|
00000c  4391              BICS     r1,r1,r2
                  |L15.14|
00000e  6141              STR      r1,[r0,#0x14]
000010  6941              LDR      r1,[r0,#0x14]
000012  2204              MOVS     r2,#4
000014  4311              ORRS     r1,r1,r2
000016  6141              STR      r1,[r0,#0x14]
000018  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.16||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.16||, ||.text||
                  I2C_DisableTimeout PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6941              LDR      r1,[r0,#0x14]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2204              MOVS     r2,#4
000004  4391              BICS     r1,r1,r2              ;33
000006  6141              STR      r1,[r0,#0x14]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.17||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.text||
                  I2C_EnableWakeup PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6bc1              LDR      r1,[r0,#0x3c]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  2201              MOVS     r2,#1
000004  4311              ORRS     r1,r1,r2              ;33
000006  63c1              STR      r1,[r0,#0x3c]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


                          AREA ||area_number.18||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.18||, ||.text||
                  I2C_DisableWakeup PROC
;;;31       */
;;;32     uint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock)
000000  6bc1              LDR      r1,[r0,#0x3c]
;;;33     {
;;;34         uint32_t u32Div;
;;;35     
;;;36         u32Div = (uint32_t) (((SystemCoreClock * 10)/(u32BusClock * 4) + 5) / 10 - 1); /* Compute proper divider for I2C clock */
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1              ;33
000006  63c1              STR      r1,[r0,#0x3c]
000008  4770              BX       lr
;;;37         i2c->I2CLK = u32Div;
;;;38     
;;;39         /* Enable I2C */
;;;40         i2c->I2CON |= I2C_I2CON_ENSI_Msk;
;;;41     
;;;42         return ( SystemCoreClock / ((u32Div+1)<<2) );
;;;43     }
;;;44     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Library\\StdDriver\\src\\i2c.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REV16|
#line 118 "..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_i2c_c_I2C_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Open____REVSH|
#line 132
|__asm___5_i2c_c_I2C_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
