; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini51Series\Include -I..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include --omf_browse=.\obj\retarget.crf ..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;38     {
000002  4604              MOV      r4,r0
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000004  6801              LDR      r1,[r0,#0]
000006  a01f              ADR      r0,|L1.132|
000008  f7fffffe          BL       __2printf
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
00000c  a020              ADR      r0,|L1.144|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
000014  a021              ADR      r0,|L1.156|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
00001c  a022              ADR      r0,|L1.168|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
000024  a023              ADR      r0,|L1.180|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
00002c  a024              ADR      r0,|L1.192|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
000034  a025              ADR      r0,|L1.204|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;46     	printf("psr = 0x%x\n", stack[psr]);
00003c  a026              ADR      r0,|L1.216|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;47     } 
000044  bd10              POP      {r4,pc}
;;;48     
                          ENDP

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;49     void Hard_Fault_Handler(uint32_t stack[])
000046  4604              MOV      r4,r0
;;;50     {     
;;;51         printf("In Hard Fault Handler\n");
000048  a026              ADR      r0,|L1.228|
00004a  f7fffffe          BL       __2printf
;;;52     
;;;53         stackDump(stack);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       stackDump
                  |L1.84|
;;;54     	
;;;55     	//Chip Reset
;;;56     	//SYS_UnlockReg();
;;;57     	//SYS->IPRSTC1 |= SYS_IPRSTC1_CHIP_RST_Msk;
;;;58     
;;;59         while(1);
000054  e7fe              B        |L1.84|
;;;60     }
;;;61     
                          ENDP

                  SendChar_ToUART PROC
;;;303    
;;;304    void SendChar_ToUART(int ch)
000056  4929              LDR      r1,|L1.252|
                  |L1.88|
;;;305    {
;;;306    #ifndef DISABLE_UART
;;;307            while(UART->FSR & UART_FSR_TX_FULL_Msk);
000058  698a              LDR      r2,[r1,#0x18]
00005a  0212              LSLS     r2,r2,#8
00005c  d4fc              BMI      |L1.88|
;;;308            UART->THR = ch;
00005e  6008              STR      r0,[r1,#0]
;;;309            if(ch == '\n'){
000060  280a              CMP      r0,#0xa
000062  d104              BNE      |L1.110|
                  |L1.100|
;;;310                while(UART->FSR & UART_FSR_TX_FULL_Msk);
000064  6988              LDR      r0,[r1,#0x18]
000066  0200              LSLS     r0,r0,#8
000068  d4fc              BMI      |L1.100|
;;;311                UART->THR = '\r';
00006a  200d              MOVS     r0,#0xd
00006c  6008              STR      r0,[r1,#0]
                  |L1.110|
;;;312            }
;;;313    #endif
;;;314    }
00006e  4770              BX       lr
;;;315    
                          ENDP

                  fputc PROC
;;;437    
;;;438    int fputc(int ch, FILE *f)
000070  b500              PUSH     {lr}
;;;439    {
000072  4603              MOV      r3,r0
000074  f7fffffe          BL       SendChar_ToUART
;;;440      SendChar(ch);
;;;441      return ch;
000078  4618              MOV      r0,r3
;;;442    }
00007a  bd00              POP      {pc}
;;;443    
                          ENDP

                  ferror PROC
;;;448    
;;;449    int ferror(FILE *f) {
00007c  2000              MOVS     r0,#0
;;;450      return EOF;
00007e  43c0              MVNS     r0,r0
;;;451    }
000080  4770              BX       lr
;;;452    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
000084  72302020          DCB      "r0  = 0x%x\n",0
000088  3d203078
00008c  25780a00
                  |L1.144|
000090  72312020          DCB      "r1  = 0x%x\n",0
000094  3d203078
000098  25780a00
                  |L1.156|
00009c  72322020          DCB      "r2  = 0x%x\n",0
0000a0  3d203078
0000a4  25780a00
                  |L1.168|
0000a8  72332020          DCB      "r3  = 0x%x\n",0
0000ac  3d203078
0000b0  25780a00
                  |L1.180|
0000b4  72313220          DCB      "r12 = 0x%x\n",0
0000b8  3d203078
0000bc  25780a00
                  |L1.192|
0000c0  6c722020          DCB      "lr  = 0x%x\n",0
0000c4  3d203078
0000c8  25780a00
                  |L1.204|
0000cc  70632020          DCB      "pc  = 0x%x\n",0
0000d0  3d203078
0000d4  25780a00
                  |L1.216|
0000d8  70737220          DCB      "psr = 0x%x\n",0
0000dc  3d203078
0000e0  25780a00
                  |L1.228|
0000e4  496e2048          DCB      "In Hard Fault Handler\n",0
0000e8  61726420
0000ec  4661756c
0000f0  74204861
0000f4  6e646c65
0000f8  720a00  
0000fb  00                DCB      0
                  |L1.252|
                          DCD      0x40050000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  SendChar PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;38     {
000002  f7fffffe          BL       SendChar_ToUART
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  GetChar PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  4803              LDR      r0,|L3.16|
                  |L3.2|
;;;38     {
000002  6981              LDR      r1,[r0,#0x18]
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L3.2|
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
00000c  4770              BX       lr
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40050000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  kbhit PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  4802              LDR      r0,|L4.12|
;;;38     {
000002  6980              LDR      r0,[r0,#0x18]
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000004  0440              LSLS     r0,r0,#17
000006  17c0              ASRS     r0,r0,#31
000008  1c40              ADDS     r0,r0,#1
00000a  4770              BX       lr
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP

                  |L4.12|
                          DCD      0x40050000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  IsDebugFifoEmpty PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  4802              LDR      r0,|L5.12|
;;;38     {
000002  6980              LDR      r0,[r0,#0x18]
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
000008  4770              BX       lr
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40050000

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  _ttywrch PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;38     {
000002  f7fffffe          BL       SendChar_ToUART
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  fgetc PROC
;;;36     
;;;37     void stackDump(uint32_t stack[])
000000  b500              PUSH     {lr}
;;;38     {
000002  f7fffffe          BL       GetChar
;;;39     	printf("r0  = 0x%x\n", stack[r0]);
000006  bd00              POP      {pc}
;;;40     	printf("r1  = 0x%x\n", stack[r1]);
;;;41     	printf("r2  = 0x%x\n", stack[r2]);
;;;42     	printf("r3  = 0x%x\n", stack[r3]);
;;;43     	printf("r12 = 0x%x\n", stack[r12]);
;;;44     	printf("lr  = 0x%x\n", stack[lr]);
;;;45     	printf("pc  = 0x%x\n", stack[pc]);
;;;46     	printf("psr = 0x%x\n", stack[psr]);
;;;47     } 
;;;48     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REV16|
#line 118 "..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_retarget_c_8c64092a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_retarget_c_8c64092a____REVSH|
#line 132
|__asm___10_retarget_c_8c64092a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |HardFault_Handler|
#line 277 "..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 278

 MOVS r0, #4 
 MOV r1, LR 
 TST r0, r1 
 BEQ Stack_Use_MSP 
 MRS R0, PSP 
 B Get_LR_and_Branch 
Stack_Use_MSP 
 MRS R0, MSP 
Get_LR_and_Branch 
 MOV R1, LR 
 LDR R2,= |Hard_Fault_Handler| 
 BX R2 
	ENDP

;*** End   embedded assembler ***
