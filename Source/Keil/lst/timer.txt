; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timer.d --feedback=.\obj\template.fed --cpu=Cortex-M0 --apcs=interwork -I..\Library\CMSIS\Include -I..\Library\Device\Nuvoton\Mini51Series\Include -I..\Library\StdDriver\inc -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include --omf_browse=.\obj\timer.crf ..\Library\StdDriver\src\timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIMER_GetModuleClock PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  4a0f              LDR      r2,|L1.64|
;;;42     {
000002  4910              LDR      r1,|L1.68|
000004  4290              CMP      r0,r2
000006  6948              LDR      r0,[r1,#0x14]
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  d101              BNE      |L1.14|
00000a  0a00              LSRS     r0,r0,#8
00000c  e000              B        |L1.16|
                  |L1.14|
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000e  0b00              LSRS     r0,r0,#12
                  |L1.16|
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
000010  0740              LSLS     r0,r0,#29
000012  0f40              LSRS     r0,r0,#29
000014  d005              BEQ      |L1.34|
;;;48             u32Cmpr = 2;
000016  2801              CMP      r0,#1
000018  d00d              BEQ      |L1.54|
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
00001a  2802              CMP      r0,#2
00001c  d00d              BEQ      |L1.58|
00001e  480a              LDR      r0,|L1.72|
;;;51                 u32Prescale = 1;
000020  4770              BX       lr
                  |L1.34|
;;;52                 u32Clk >>= 1;
000022  6808              LDR      r0,[r1,#0]
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
000024  0780              LSLS     r0,r0,#30
000026  0f80              LSRS     r0,r0,#30
000028  2801              CMP      r0,#1
00002a  d002              BEQ      |L1.50|
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
00002c  2001              MOVS     r0,#1
00002e  03c0              LSLS     r0,r0,#15
;;;58         timer->TCMPR = u32Cmpr;
000030  4770              BX       lr
                  |L1.50|
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
000032  4806              LDR      r0,|L1.76|
000034  4770              BX       lr
                  |L1.54|
000036  4806              LDR      r0,|L1.80|
000038  4770              BX       lr
                  |L1.58|
00003a  4806              LDR      r0,|L1.84|
00003c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;61     }
00003e  4770              BX       lr
;;;62     
                          ENDP

                  |L1.64|
                          DCD      0x40010000
                  |L1.68|
                          DCD      0x50000200
                  |L1.72|
                          DCD      0x01518000
                  |L1.76|
                          DCD      0x00b71b00
                  |L1.80|
                          DCD      0x00002710
                  |L1.84|
                          DCD      SystemCoreClock

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  TIMER_Open PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b5f8              PUSH     {r3-r7,lr}
;;;42     {
000002  4613              MOV      r3,r2
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  f7fffffe          BL       TIMER_GetModuleClock
00000c  4604              MOV      r4,r0
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000e  2500              MOVS     r5,#0
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
000010  0840              LSRS     r0,r0,#1
000012  4298              CMP      r0,r3
000014  d201              BCS      |L2.26|
;;;48             u32Cmpr = 2;
000016  2002              MOVS     r0,#2
000018  e008              B        |L2.44|
                  |L2.26|
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
00001a  4909              LDR      r1,|L2.64|
00001c  428c              CMP      r4,r1
00001e  d901              BLS      |L2.36|
;;;51                 u32Prescale = 1;
000020  2501              MOVS     r5,#1
;;;52                 u32Clk >>= 1;
000022  4604              MOV      r4,r0
                  |L2.36|
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
000024  4619              MOV      r1,r3
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       __aeabi_uidivmod
                  |L2.44|
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
00002c  432f              ORRS     r7,r7,r5
00002e  6037              STR      r7,[r6,#0]
;;;58         timer->TCMPR = u32Cmpr;
000030  6070              STR      r0,[r6,#4]
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
000032  1c6d              ADDS     r5,r5,#1
000034  4368              MULS     r0,r5,r0
000036  4601              MOV      r1,r0
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       __aeabi_uidivmod
;;;61     }
00003e  bdf8              POP      {r3-r7,pc}
;;;62     
                          ENDP

                  |L2.64|
                          DCD      0x00ffffff

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  TIMER_Close PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  2100              MOVS     r1,#0
;;;42     {
000002  6001              STR      r1,[r0,#0]
000004  6141              STR      r1,[r0,#0x14]
000006  4770              BX       lr
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
;;;48             u32Cmpr = 2;
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
;;;51                 u32Prescale = 1;
;;;52                 u32Clk >>= 1;
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
;;;61     }
;;;62     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  TIMER_Delay PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b5f8              PUSH     {r3-r7,lr}
;;;42     {
000002  460f              MOV      r7,r1
000004  4605              MOV      r5,r0
000006  f7fffffe          BL       TIMER_GetModuleClock
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
00000a  4606              MOV      r6,r0
00000c  2000              MOVS     r0,#0
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000e  9000              STR      r0,[sp,#0]
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
000010  481f              LDR      r0,|L4.144|
000012  4631              MOV      r1,r6
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;48             u32Cmpr = 2;
000016  f7fffffe          BL       __aeabi_uidivmod
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
00001a  4604              MOV      r4,r0
00001c  2000              MOVS     r0,#0
00001e  6028              STR      r0,[r5,#0]
;;;51                 u32Prescale = 1;
000020  6168              STR      r0,[r5,#0x14]
;;;52                 u32Clk >>= 1;
000022  481c              LDR      r0,|L4.148|
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
000024  4286              CMP      r6,r0
000026  d106              BNE      |L4.54|
000028  4638              MOV      r0,r7
00002a  2164              MOVS     r1,#0x64
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
00002c  3063              ADDS     r0,r0,#0x63
00002e  f7fffffe          BL       __aeabi_uidivmod
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
000032  2164              MOVS     r1,#0x64
000034  e005              B        |L4.66|
                  |L4.54|
000036  4638              MOV      r0,r7
000038  210a              MOVS     r1,#0xa
00003a  3009              ADDS     r0,r0,#9
00003c  f7fffffe          BL       __aeabi_uidivmod
;;;61     }
000040  210a              MOVS     r1,#0xa
                  |L4.66|
000042  4348              MULS     r0,r1,r0
000044  4607              MOV      r7,r0
000046  4814              LDR      r0,|L4.152|
000048  4286              CMP      r6,r0
00004a  d902              BLS      |L4.82|
00004c  2001              MOVS     r0,#1
00004e  0876              LSRS     r6,r6,#1
000050  9000              STR      r0,[sp,#0]
                  |L4.82|
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       __aeabi_ui2f
000058  4606              MOV      r6,r0
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       __aeabi_ui2f
000060  4631              MOV      r1,r6
000062  f7fffffe          BL       __aeabi_fmul
000066  490d              LDR      r1,|L4.156|
000068  f7fffffe          BL       __aeabi_fdiv
00006c  f7fffffe          BL       __aeabi_f2uiz
000070  6068              STR      r0,[r5,#4]
000072  2101              MOVS     r1,#1
000074  9800              LDR      r0,[sp,#0]
000076  0789              LSLS     r1,r1,#30
000078  4308              ORRS     r0,r0,r1
00007a  6028              STR      r0,[r5,#0]
00007c  2c00              CMP      r4,#0
00007e  d002              BEQ      |L4.134|
                  |L4.128|
000080  bf00              NOP      
000082  1e64              SUBS     r4,r4,#1
000084  d1fc              BNE      |L4.128|
                  |L4.134|
000086  6828              LDR      r0,[r5,#0]
000088  0180              LSLS     r0,r0,#6
00008a  d4fc              BMI      |L4.134|
00008c  bdf8              POP      {r3-r7,pc}
;;;62     
                          ENDP

00008e  0000              DCW      0x0000
                  |L4.144|
                          DCD      SystemCoreClock
                  |L4.148|
                          DCD      0x00002710
                  |L4.152|
                          DCD      0x00ffffff
                  |L4.156|
                          DCD      0x49742400

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  TIMER_EnableCapture PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  b510              PUSH     {r4,lr}
;;;42     {
000002  6943              LDR      r3,[r0,#0x14]
000004  24ff              MOVS     r4,#0xff
000006  3417              ADDS     r4,r4,#0x17
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  43a3              BICS     r3,r3,r4
00000a  430b              ORRS     r3,r3,r1
00000c  4313              ORRS     r3,r3,r2
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000e  2108              MOVS     r1,#8
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
000010  430b              ORRS     r3,r3,r1
000012  6143              STR      r3,[r0,#0x14]
000014  bd10              POP      {r4,pc}
;;;48             u32Cmpr = 2;
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
;;;51                 u32Prescale = 1;
;;;52                 u32Clk >>= 1;
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
;;;61     }
;;;62     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  TIMER_DisableCapture PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  6941              LDR      r1,[r0,#0x14]
;;;42     {
000002  2208              MOVS     r2,#8
000004  4391              BICS     r1,r1,r2
000006  6141              STR      r1,[r0,#0x14]
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  4770              BX       lr
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
;;;48             u32Cmpr = 2;
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
;;;51                 u32Prescale = 1;
;;;52                 u32Clk >>= 1;
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
;;;61     }
;;;62     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  TIMER_EnableEventCounter PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  6942              LDR      r2,[r0,#0x14]
;;;42     {
000002  0852              LSRS     r2,r2,#1
000004  0052              LSLS     r2,r2,#1
000006  430a              ORRS     r2,r2,r1
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  6142              STR      r2,[r0,#0x14]
00000a  6801              LDR      r1,[r0,#0]
00000c  2201              MOVS     r2,#1
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
00000e  0612              LSLS     r2,r2,#24
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
000010  4311              ORRS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
000014  4770              BX       lr
;;;48             u32Cmpr = 2;
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
;;;51                 u32Prescale = 1;
;;;52                 u32Clk >>= 1;
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
;;;61     }
;;;62     
                          ENDP


                          AREA ||area_number.8||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.8||, ||.text||
                  TIMER_DisableEventCounter PROC
;;;40       */
;;;41     uint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq)
000000  6801              LDR      r1,[r0,#0]
;;;42     {
000002  2201              MOVS     r2,#1
000004  0612              LSLS     r2,r2,#24
000006  4391              BICS     r1,r1,r2
;;;43         uint32_t u32Clk = TIMER_GetModuleClock(timer);
000008  6001              STR      r1,[r0,#0]
00000a  4770              BX       lr
;;;44         uint32_t u32Cmpr = 0, u32Prescale = 0;
;;;45     
;;;46         // Fastest possible timer working freq is u32Clk / 2. While cmpr = 2, pre-scale = 0
;;;47         if(u32Freq > (u32Clk / 2)) {
;;;48             u32Cmpr = 2;
;;;49         } else {
;;;50             if(u32Clk > 0xFFFFFF) { // For Mini, only needs to consider 24MHz at most
;;;51                 u32Prescale = 1;
;;;52                 u32Clk >>= 1;
;;;53             }
;;;54             u32Cmpr = u32Clk / u32Freq;
;;;55         }
;;;56     
;;;57         timer->TCSR = u32Mode | u32Prescale;
;;;58         timer->TCMPR = u32Cmpr;
;;;59     
;;;60         return(u32Clk / (u32Cmpr * (u32Prescale + 1)));
;;;61     }
;;;62     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Library\\StdDriver\\src\\timer.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REV16|
#line 118 "..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_timer_c_5bec749a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_timer_c_5bec749a____REVSH|
#line 132
|__asm___7_timer_c_5bec749a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
